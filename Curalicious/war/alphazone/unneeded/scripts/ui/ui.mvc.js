//Define UI object
var ui = ui || {};

// viewController
ui.mvc = ui.mvc || {};
ui.mvc.viewControllers = ui.mvc.viewControllers || {};
ui.mvc.views = ui.mvc.views || {};

//Load View and Controller
ui.mvc.loadViewAndController = function(viewName, placeAt, callback) {

	// Parameter Flexibility
	if (typeof placeAt == "function") {
		callback = placeAt;
		placeAt = undefined;
	}

	// Load Cached View
	if (ui.mvc.views.hasOwnProperty(viewName)) {

		var view					= ui.mvc.views[viewName];
		var viewControllerInstance	= ui.mvc.viewControllers[viewName];
		
		// Place view at element
		if (placeAt != undefined) {
			viewControllerInstance.placeViewAt(placeAt);
		}

		if (typeof callback !== undefined)
			callback(viewControllerInstance, view);

	} else {

		// Step 1: HTML Content
		ajax.load(viewName + "View.html", function(htmlContent) {
			var view = $(String(htmlContent));
			ui.mvc.views[viewName] = view;
			view.attr("viewName", viewName);

			// Step 2: JavaScript Content
			loadViewControllerScript(viewName + "ViewController.js", function(viewController) {
				var viewControllerInstance = _defaultViewControllerFunction(view);

				if (typeof viewController == "function")
					viewController(ui.mvc.views[viewName], viewControllerInstance);

				// Call onLoad Method
				viewControllerInstance.onLoad(true);

				// Place view at element
				if (placeAt != undefined) {
					viewControllerInstance.placeViewAt(placeAt);
				}
				
				//Keep controller with the view
				if(view !== undefined && viewControllerInstance !== undefined){
					view.addClass("hasViewController");
				}
				
				//Keep the view controller instance
				ui.mvc.viewControllers[viewName] = viewControllerInstance;
				
				if (typeof callback == "function")
					callback(viewControllerInstance, view);

			});
		});

	}
}

//Load View ViewController and StyleSheet
ui.mvc.loadViewControllerAndStyle = function(viewName, placeAt, callback) {
	ui.loader.loadStyleSheet(viewName + "View.css", function() {
		ui.mvc.loadViewAndController(viewName, placeAt, callback);
	});	
}

ui.mvc.loadViewController = function(viewName, placeAt, callback){

	// Load Cached View
	if (ui.mvc.views.hasOwnProperty(viewName)) {

		var view					= ui.mvc.views[viewName];
		var viewControllerInstance	= ui.mvc.viewControllers[viewName];
		
		// Place view at element
		if (placeAt != undefined) {
			viewControllerInstance.placeViewAt(placeAt);
		}

		if (typeof callback !== undefined)
			callback(viewControllerInstance, view);
		
	} else {
	
		loadViewControllerScript(viewName + "ViewController.js", function(viewController) {
			var view 				   = $("<div class='autogeneratedview'></div>");
			var viewControllerInstance = _defaultViewControllerFunction(view);
			ui.mvc.views[viewName] 	   = view;
			
			if (typeof viewController == "function")
				viewController(ui.mvc.views[viewName], viewControllerInstance);
	
			// Call onLoad Method
			viewControllerInstance.onLoad(true);
	
			// Place view at element
			if (placeAt != undefined) {
				viewControllerInstance.placeViewAt(placeAt);
			}
			
			//Keep controller with the view
			if(view !== undefined && viewControllerInstance !== undefined){
				view.addClass("hasViewController");
			}
			
			//Keep the view controller instance
			ui.mvc.viewControllers[viewName] = viewControllerInstance;
			
			if (typeof callback == "function")
				callback(viewControllerInstance, view);
	
		});
	
	}
};

ui.mvc.loadMVC = ui.mvc.loadViewControllerAndStyle;

function recallLoadViewController(url, callback){
	return function(){
		loadViewControllerScript(url, callback);
	}
}


ui.mvc.viewControllerIsLoading = false;

function loadViewControllerScript(url, callback) {
	
	if(ui.mvc.viewControllerIsLoading == true){
		setTimeout(recallLoadViewController(url, callback), 200);
		return;
	}
	
	ui.mvc.newViewController 		= undefined;
	ui.mvc.viewControllerIsLoading  = true;
	
	ui.loader.loadScript(url, function(){		
		var viewController 				= ui.mvc.newViewController;
		ui.mvc.viewControllerIsLoading 	= false;
		
		if(viewController === undefined){
			console.error("viewcontroller loading error");
		}
		
		if(typeof callback == "function")
			callback(viewController);
	});
}


ui.mvc.loadAllElementsWithID = function(view){
	
	var elementObject = {};
	
	view.find("[id]").each(function(){
		
		var element = $(this);
		var id = element.attr("id");
		elementObject[id] = element;
		
	});
	
	return elementObject;	
}



//Create default ViewController
function _defaultViewControllerFunction(view) {

	var viewController = {};

	viewController.getView = viewController.getView || function() {
		return view;
	};

	viewController.onLoad = viewController.onLoad || function() {

	};

	viewController.onUnload = viewController.onUnload || function() {

	};

	viewController.onAppear = viewController.onAppear || function() {

	};

	viewController.onDisappear = viewController.onDisappear || function() {

	};
	
	viewController.onNavigation = viewController.onNavigation || function(attributes) {
		
	};

	viewController.removeView = viewController.removeView || function() {
		viewController.onDisappear();
		view.detach();
	};

	viewController.placeViewAt = viewController.placeViewAt || function(place, animated){
		if(animated == true){
			view.hide();
			view.appendTo(place);
			view.show();
		} else {
			view.appendTo(place);
		}
		viewController.onAppear();
		
	};
	
	viewController.placeAt = viewController.placeViewAt;
	
	return viewController;

}
